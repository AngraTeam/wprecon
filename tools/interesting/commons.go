package interesting

import (
	"fmt"
	"strings"
	"sync"

	"github.com/blackcrw/wprecon/internal/database"
	"github.com/blackcrw/wprecon/internal/models"
	"github.com/blackcrw/wprecon/internal/net"
	"github.com/blackcrw/wprecon/internal/printer"
)

func WPCheck() float32 {
	var wg sync.WaitGroup
	var confidence float32

	var payloads = [4]string{
		"<meta name=\"generator content=\"WordPress",
		"<a href=\"http://www.wordpress.com\">Powered by WordPress</a>",
		"<link rel=\"https://api.wordpress.org/",
		"<link rel=\"https://api.w.org/\"",
	}

	wg.Add(4)
		
	go func(){ if check := AdminPage();        check.Confidence == 100 { confidence++ }; wg.Done() }()
	go func(){ if check := DirectoryPlugins(); check.Confidence == 100 { confidence++ }; wg.Done() }()
	go func(){ if check := DirectoryThemes();  check.Confidence == 100 { confidence++ }; wg.Done() }()
	go func(){ if check := DirectoryUploads(); check.Confidence == 100 { confidence++ }; wg.Done() }()
	
	for _, payload := range payloads {
		if strings.Contains(database.Memory.GetString("HTTP Index Raw"), payload) {
			confidence++
		}
	}
	
	wg.Wait()

	return confidence / 8 * 100
}

func WPCron() models.InterestingModel {
	var http = net.NewNETClient()
	http.SetURL(database.Memory.GetString("Target")).SetURLDirectory(database.Memory.GetString("HTTP wp-content") + "/wp-cron.php")
	http.OnTor(database.Memory.GetBool("HTTP Options TOR"))
	http.OnRandomUserAgent(database.Memory.GetBool("HTTP Options Random Agent"))
	http.OnTLSCertificateVerify(database.Memory.GetBool("HTTP Options TLS Certificate Verify"))
	http.OnFirewallDetection(true)

	var response, err = http.Runner()

	if err != nil {
		printer.Danger(fmt.Sprintf("%s", err))
	}

	return models.InterestingModel{Url: response.URL.Full, Status: response.Response.StatusCode, Raw: response.Raw, Confidence: 100, FoundBy: "Direct Access"}
}

func PHPDisabled() models.InterestingModel {
	var http = net.NewNETClient()
	http.SetURL(database.Memory.GetString("Target")).SetURLDirectory(database.Memory.GetString("HTTP wp-content") + "/wp-includes/version.php")
	http.OnTor(database.Memory.GetBool("HTTP Options TOR"))
	http.OnRandomUserAgent(database.Memory.GetBool("HTTP Options Random Agent"))
	http.OnTLSCertificateVerify(database.Memory.GetBool("HTTP Options TLS Certificate Verify"))
	http.OnFirewallDetection(true)

	var response, err = http.Runner()
	
	if err != nil {
		printer.Danger(fmt.Sprintf("%s", err))
	}
	
	return models.InterestingModel{Url: response.URL.Full, Status: response.Response.StatusCode, Raw: response.Raw, Confidence: 100, FoundBy: "Direct Access"}
}

func XMLRPC() models.InterestingModel {
	var http = net.NewNETClient()
	http.SetURL(database.Memory.GetString("Target")).SetURLDirectory("xmlrpc.php")
	http.OnTor(database.Memory.GetBool("HTTP Options TOR"))
	http.OnRandomUserAgent(database.Memory.GetBool("HTTP Options Random Agent"))
	http.OnTLSCertificateVerify(database.Memory.GetBool("HTTP Options TLS Certificate Verify"))
	http.OnFirewallDetection(true)

	var response, err = http.Runner()

	if err != nil {
		printer.Danger(fmt.Sprintf("%s", err))
	}

	var model = models.InterestingModel{Url: response.URL.Full, Raw: response.Raw, Confidence: -1, FoundBy: "Direct Access"}

	if strings.Contains(response.Raw, "XML-RPC server accepts POST requests only.") {
		model.Confidence += 60
	}

	if response.Response.StatusCode == 405 {
		model.Confidence += 20
	}
	
	if strings.Contains(response.Raw, "This error was generated by Mod_Security.") {
		model.Confidence = 80
		model.FoundBy = "Direct Access (Mod_Security)"
	}
	
	if strings.Contains(database.Memory.GetString("HTTP Index Raw"), "xmlrpc.php") {
		model.Confidence += 11
	}

	return model
}