package interesting

import (
	"strings"

	"github.com/AngraTeam/wprecon/internal/http"
	. "github.com/AngraTeam/wprecon/internal/memory"
	"github.com/AngraTeam/wprecon/internal/text"
)

func WPCron(URL string) (*Interesting, error) {
	var request = http.NewHTTP(URL + "/wp-cron.php")

	request.OnRandomUserAgent(true)
	request.OnTLSCertificateVerify(false)

	var response, err = http.Do(request)

	if err != nil {
		return &Interesting{}, err
	}

	var entity = &Interesting{
		Url:        response.URL.String(),
		Raw:        response.Raw,
		Status:     response.Response.StatusCode,
		FoundBy:    "Direct Access",
		Confidence: 0,
	}

	if response.Response.StatusCode == 200 || response.Response.StatusCode == 403 {
		entity.Confidence = 100
	}

	return entity, nil
}

func PHPDisabled(URL string) (*Interesting, error) {
	var request = http.NewHTTP(URL + "/wp-includes/version.php")

	request.OnRandomUserAgent(true)
	request.OnTLSCertificateVerify(false)

	var response, err = http.Do(request)

	if err != nil {
		return &Interesting{}, err
	}

	var entity = &Interesting{
		Url:        response.URL.String(),
		Raw:        response.Raw,
		Status:     response.Response.StatusCode,
		FoundBy:    "Direct Access",
		Confidence: 0,
	}

	if response.Response.StatusCode == 200 || response.Response.StatusCode == 403 {
		entity.Confidence = 100
	}

	return entity, nil
}

func XMLRPC(URL string) (*Interesting, error) {
	var request = http.NewHTTP(URL + "/xmlrpc.php")

	request.OnRandomUserAgent(true)
	request.OnTLSCertificateVerify(false)

	var response, err = http.Do(request)

	if err != nil {
		return &Interesting{}, err
	}

	var entity = &Interesting{
		Url:        response.URL.String(),
		Raw:        response.Raw,
		Status:     response.Response.StatusCode,
		FoundBy:    "Direct Access",
		Confidence: 0,
	}

	if strings.Contains(response.Raw, "XML-RPC server accepts POST requests only.") {
		entity.Confidence = text.FormatConfidence(entity.Confidence, 60)
	}

	if response.Response.StatusCode == 405 {
		entity.Confidence = text.FormatConfidence(entity.Confidence, 20)
	}

	if strings.Contains(response.Raw, "This error was generated by Mod_Security.") {
		entity.Confidence = text.FormatConfidence(entity.Confidence, 80)
		entity.FoundBy = "Direct Access (Mod_Security)"
	}

	if strings.Contains(Memory.GetString("HTTP Index Raw"), "xmlrpc.php") {
		entity.Confidence = text.FormatConfidence(entity.Confidence, 10)
	}

	return entity, nil
}
