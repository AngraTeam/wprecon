package net

import (
	"fmt"
	"strings"
	"sync"

	"github.com/blackcrw/wprecon/internal/database"
	"github.com/blackcrw/wprecon/internal/models"
)

type web_application_firewall struct {
	net *models.ResponseModel
	name string
	found []string
	solve []string
	confidence int
	wg sync.WaitGroup
}

func format(ss string) (slicex []string) {
	slicex = append(slicex, strings.Title(ss))

	return slicex
}

func NewWAFDetection(response *models.ResponseModel) *web_application_firewall {
	return &web_application_firewall{ net: response }
}

// Aggressive :: It is this function that must be performed for the detection of the web application firewall to be performed.
func (this *web_application_firewall) Aggressive() *models.ResponseModel {
	var paths = [...]string{
		"wordfence",
		"cloudflare",
		"bulletproof-security",
		"better-wp-security",
		"sucuri-scanner",
		"wp-security-scan",
		"block-bad-queries",
		"all-in-one-wp-security-and-firewall",
		"6scan-protection",
		"siteguard",
		"ninjafirewall",
		"malcare-security",
		"wp-cerber",
		"wesecur-security"}

	for _, path := range paths {
		var paths_format = fmt.Sprintf("%s/plugins/%s/", database.Memory.GetString("HTTP wp-content"), path)

		if response := SimpleRequest(database.Memory.GetString("Target"), paths_format); response.Response.StatusCode == 200 || response.Response.StatusCode == 403 {
			return response
		}
	}

	return nil
}

func (this *web_application_firewall) Cloudflare() *web_application_firewall {
	var (
		name string = "Cloudflare"
		found []string = []string{}
		confidence int
	)

	if strings.Contains(this.net.Raw, "Cloudflare Ray ID:") || strings.Contains(this.net.Raw, "Attention Required!") || strings.Contains(this.net.Raw, "DDoS protection by Cloudflare") {
		found = format("Text snippet")
		confidence += 80
	}
	
	if this.net.Response.Header.Get("Server") == "cloudflare" {
		found = format("Header field value")
		confidence += 10
	}

	defer this.wg.Done()

	if confidence > 0 {
		this.name = name
		this.found = found
		this.confidence = confidence
	}

	return this
}

func (this *web_application_firewall) Cerber() *web_application_firewall {
	var (
		name string = "Wordpress Cerber"
		confidence int
		found []string = []string{}
		solve []string = []string{}
	)

	if strings.Contains(this.net.Raw, "We're sorry, you are not allowed to proceed") {
		solve = format("One solution is to use proxy's")
		found = format("Text snippet warning")
		confidence = 40
	} 
	
	if strings.Contains(this.net.Raw, "Your request looks suspicious or similar to automated requests from spam posting software") {
		solve = format("Set a time for requests with: --http-sleep")
		confidence = 40
	}

	defer this.wg.Done()

	if confidence > 0 {
		this.name = name
		this.found = found
		this.solve = solve
		this.confidence = confidence
	}

	return this
}

func (this *web_application_firewall) NinjaFirewall() *web_application_firewall {
	var (
		name string = "Ninja Firewall"
		confidence int
		found []string = []string{}
		solve []string = []string{}
	)

	if strings.Contains(this.net.Raw, "For security reasons, it was blocked and logged") {
		found = format("Text snippet warning")
		solve = format("One solution is to use proxy's")
		confidence = 40
	} 
	
	if strings.Contains(this.net.Raw, "NinjaFirewall") && strings.Contains(this.net.Raw, "NinjaFirewall: 403 Forbidden") {
		found = format("Keyword in title.")
		confidence = 50
	}

	defer this.wg.Done()

	if confidence > 0 {
		this.name = name
		this.found = found
		this.solve = solve
		this.confidence = confidence
	}

	return this
}

func (this *web_application_firewall) Wordfence() *web_application_firewall {
	var (
		name string = "Wordfence"
		confidence int
		found []string = []string{}
		solve []string = []string{}
	)
	
	if strings.Contains(this.net.Raw, "Generated by Wordfence") || strings.Contains(this.net.Raw, "This response was generated by Wordfence") {
		found = format("Text snippet")
		confidence = 80
	}
	
	if strings.Contains(this.net.Raw, "A potentially unsafe operation has been detected in your request to this site") || strings.Contains(this.net.Raw, "Your access to this site has been limited") {
		found = format("Text snippet warning")
		solve = format("Set a time for requests with: --http-sleep")
		confidence = 20
	}

	defer this.wg.Done()

	if confidence > 0 {
		this.name = name
		this.found = found
		this.solve = solve
		this.confidence = confidence
	}

	return this
}

func (this *web_application_firewall) BulletProof() *web_application_firewall {
	var (
		name string = "BulletProof Security"
		confidence int
		found []string = []string{}
	)

	if strings.Contains(this.net.Raw, "If you arrived here due to a search or clicking on a link click your Browser's back button to return to the previous page.") {
		found = format("Text snippet")
		confidence = 10
	}

	defer this.wg.Done()

	if confidence > 0 {
		this.name = name
		this.found = found
		this.confidence = confidence
	}

	return this
}


func (this *web_application_firewall) SiteGuard() *web_application_firewall {
	var (
		name string = "SiteGuard"
		confidence int
		found []string = []string{}
	)

	if strings.Contains(this.net.Raw, "Powered by SiteGuard") || strings.Contains(this.net.Raw, "The server refuse to browse the page.") {
		found = format("Text snippet")
		confidence = 20
	}

	defer this.wg.Done()

	if confidence > 0 {
		this.name = name
		this.found = found
		this.confidence = confidence
	}

	return this
}

func (this *web_application_firewall) All() *web_application_firewall {
	this.wg.Add(6)

	go this.Cloudflare()
	go this.SiteGuard()
	go this.BulletProof()
	go this.Cerber()
	go this.Wordfence()
	go this.NinjaFirewall()

	this.wg.Wait()

	return this
}

func (this *web_application_firewall) Runner() (string, string, string, int) {
	var (
		found string
		solve string
	)

	if len(this.found) > 1 {
		found = strings.Join(this.found, " | ")
		found = strings.Title(found)
	}

	if len(this.solve) > 1 {
		solve = strings.Join(this.solve, " and ")
		solve = strings.Title(found)
	}

	return this.name, found, solve, this.confidence
}
