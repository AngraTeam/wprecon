package gohttp

import (
	"net/http"
	"strings"
	"sync"
)

type webapplicationfirewall struct {
	http       *http.Response
	raw        string
	exists     bool
	output     string
	solve      string
	firewall   string
	confidence int
}

var wg sync.WaitGroup

// NewFirewallDetectionPassive :: This will act as an active passive firewall detector. It will try to identify a firewall by the headers or body.
// I put only the main firewalls
func NewFirewallDetectionPassive(response *Response) *webapplicationfirewall {
	return &webapplicationfirewall{http: response.Response, raw: response.Raw}
}

func (self *webapplicationfirewall) Cloudflare() *webapplicationfirewall {
	if strings.Contains(self.raw, "Cloudflare Ray ID:") || strings.Contains(self.raw, "Attention Required!") || strings.Contains(self.raw, "DDoS protection by Cloudflare") {
		self.exists = true
		self.output = "Text snippet."
		self.firewall = "Cloudflare"
		self.confidence = 70
	} else if self.http.Header.Get("Server") == "cloudflare" {
		self.exists = true
		self.output = "Header field value."
		self.firewall = "Cloudflare"
		self.confidence = 10
	}

	defer wg.Done()

	return self
}

func (self *webapplicationfirewall) Cerber() *webapplicationfirewall {
	if strings.Contains(self.raw, "We're sorry, you are not allowed to proceed") {
		self.exists = true
		self.output = "Text warning."
		self.solve = "Use the parameter: --tor ."
		self.firewall = "Wordpress Cerber"
		self.confidence = 40
	} else if strings.Contains(self.raw, "Your request looks suspicious or similar to automated requests from spam posting software") {
		self.exists = true
		self.output = "Text warning."
		self.solve = "Set a time for requests with: --http-sleep ."
		self.firewall = "Wordpress Cerber"
		self.confidence = 40
	}

	defer wg.Done()

	return self
}

func (self *webapplicationfirewall) NinjaFirewall() *webapplicationfirewall {
	if strings.Contains(self.raw, "For security reasons, it was blocked and logged") {
		self.exists = true
		self.output = "Text warning."
		self.solve = "Use the parameter: --tor and set a time for requests with: --http-sleep ."
		self.firewall = "NinjaFirewall"
		self.confidence = 40
	} else if strings.Contains(self.raw, "NinjaFirewall") && strings.Contains(self.raw, "NinjaFirewall: 403 Forbidden") {
		self.exists = true
		self.output = "Keyword in title."
		self.solve = "Use the parameter: --tor ."
		self.firewall = "NinjaFirewall"
		self.confidence = 50
	}

	defer wg.Done()

	return self
}

func (self *webapplicationfirewall) Wordfence() *webapplicationfirewall {
	if strings.Contains(self.raw, "Generated by Wordfence") || strings.Contains(self.raw, "This response was generated by Wordfence") {
		self.exists = true
		self.output = "Text snippet."
		self.firewall = "Wordfence"
		self.confidence = 70
	} else if strings.Contains(self.raw, "A potentially unsafe operation has been detected in your request to this site") || strings.Contains(self.raw, "Your access to this site has been limited") {
		self.exists = true
		self.output = "Text warning."
		self.solve = "Set a time for requests with: --http-sleep ."
		self.firewall = "Wordfence"
		self.confidence = 40
	}

	defer wg.Done()

	return self
}

func (self *webapplicationfirewall) BulletProof() *webapplicationfirewall {
	if strings.Contains(self.raw, "If you arrived here due to a search or clicking on a link click your Browser's back button to return to the previous page.") {
		self.exists = true
		self.output = "Text snippet."
		self.firewall = "BulletProof Security"
		self.confidence = 10
	}

	defer wg.Done()

	return self
}

func (self *webapplicationfirewall) SiteGuard() *webapplicationfirewall {
	if strings.Contains(self.raw, "Powered by SiteGuard") || strings.Contains(self.raw, "The server refuse to browse the page.") {
		self.exists = true
		self.output = "Text snippet."
		self.firewall = "SiteGuard"
		self.confidence = 20
	}

	defer wg.Done()

	return self
}

func (self *webapplicationfirewall) All() *webapplicationfirewall {
	wg.Add(6)

	go self.Cloudflare()
	go self.SiteGuard()
	go self.BulletProof()
	go self.Cerber()
	go self.Wordfence()
	go self.NinjaFirewall()

	wg.Wait()

	return self
}

func (self *webapplicationfirewall) Run() (bool, string, string, string, int) {
	if self.exists {
		return self.exists, self.firewall, self.output, self.solve, self.confidence
	}

	return false, "", "", "", 0
}
